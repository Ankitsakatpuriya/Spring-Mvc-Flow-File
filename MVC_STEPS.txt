		STEPS FOR CREATING SPRING MVC PROJECT
		flow Link:https://i.stack.imgur.com/FhF2f.png
STEP-1. create

	a.ebay(Parent Maven Project)
	 *Go to File -> New->Other->search Maven->Maven Project 
	 	*choose checkBox of create a Simple Project then Click on Next
			1.Enter GroupId(Package Name)
			2.Enter ArtifactId(Project Name)
			3.Version
			Packaging:select pom
		
			then Click on Finish. 		
	     
			POM: Project Oject Model 
			   :It is parent Project pom and it can Manage Multiple Modules.


	b.ebay_repo(Maven Module)
	*Go to Project -> Right Click on Project->Other->search Maven->Maven Module
		*choose checkBox of create a Simple Project 
		1.Module Name:Name of Module 
		2.Parent Project:Name of Parent Project
			then Click on Next		
			
			1.Enter GroupId(Package Name)
			2.Enter ArtifactId(Project Name)
			3.Version
			Packaging:select jar
		
			then Click on Finish.
	
	c.ebay_services(Maven Module)
	*Go to Project -> Right Click on Project->Other->search Maven->Maven Module
		*choose checkBox of create a Simple Project 
		1.Module Name:Name of Module 
		2.Parent Project:Name of Parent Project
			then Click on Next		
			
			1.Enter GroupId(Package Name)
			2.Enter ArtifactId(Project Name)
			3.Version
			Packaging:select jar
		
			then Click on Finish.	
	
	d.ebay_web(Maven Module)
	*Go to Project -> Right Click on Project->Other->search Maven->Maven Module
		*Note :Don't choose checkBox of create a Simple Project Because This is web Project 
		1.Module Name:Name of Module 
		2.Parent Project:Name of Parent Project
			then Click on Next		
			
		Filter:search webapp and select org.apache.maven.arti.......
			then Click on Finish.
		
		*create a java folder
		Go to ebay-web -> src-> main-> Right Click on main->folder->create java folder

STEP-2. add dependency in pom.xml.....ebay_repo
	mysql
	hibernate
	spring

STEP-3. interconnect ebay_repo, ebay_services and ebay_web ............by adding as dependency
	ebay-web->ebay-service->ebay-repo

STEP-4. configure  DispatcherServlet(Front Controller) in web.xml	
DispatcherServlet:
	1.The DispatcherServlet of Spring Web MVC framework is an implementation of FrontController and is a Java Servlet component. i.e., it is a servlet front for spring Web Mvc application.

 	2.DispatcherServlet t is the FrontController classes that receives all incoming HTTP client
request for the spring Web mvc appliaction.

   	3.DispatcherServlet is responsible for initializing spring web mvc framework for our application, and is a servlet implemented as a sub-type of HttpServlet just like any other 		   
	4.DispatcherServlet will be loaded and initialized by calling init() method
    
	5.init() of DispatcherServlet will try to identify the Spring Configuration Document with naming conventions like "servlet_name-servlet.xml" then all beans can be identified.
	
	<web-app>
  	<display-name>Archetype Created Web Application</display-name>
  
  	<servlet>
	  	<servlet-name>name of dispatcher_servlet.xml file</servlet-name>
	  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	  	<load-on-startup>1</load-on-startup>
  	</servlet>
	<servlet-mapping>
	  	<servlet-name>name of dispatcher_servlet.xml file</servlet-name>
	  	<url-pattern>*.do</url-pattern>
	</servlet-mapping>
  
</web-app>
	
	Note:<servlet-name> kuch bhi ho sakta hai</servlet-name> 
	pr dispatcher-servlet.xml ke naam ka suffix <servlet-name> se same hona chahiye
	
		Ex: <servlet-name>name of dispatcher</servlet-name>
	then name of dispatcher-servlet is
		dispatcher-servlet.xml
	
STEP-5. create dispatcher-servlet.xml file inside the WEB-INF subfolder ebay-web.
	*specify xsd in dispatcher-servlet.xml file
	
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
     http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

</beans>

	Q.why we use xsd?
	Ans.For tag Bean defination of Spring Beans(beans,mvc,context,...)  

STEP-6. create tiles.xmL file inside the WEB-INF subfolder ebay-web.
	
STEP-7. add the following two tag in dispatcher_servlet.xml

<context:annotation-config> 
	:declares support for general annotations such as @Required, @Autowired, @PostConstruct, and so 	on.

<mvc:annotation-driven/> 
	:declares explicit support for annotation-driven MVC controllers (i.e. @RequestMapping, @Controller, although support for those is the default behaviour), as well as adding support for declarative validation via @Valid and message body marshalling with @RequestBody/ResponseBody.

	<cotext:component-scan base-package="com.aartek.repo"/>............& so on
	

STEP-8. Till yet tiles.xml is not interconnect either with web.xml or dispatcher_servlet.xml

now connect with dispatcher_servlet.xml  .........2 bean defined 
		-->add the ViewResolver and TilesConfigurer in dispatcher-servlet.xml file

	1.ViewResolver:The ViewResolver provides a mapping between view names and actual views.
		*UrlBasedViewResolver. This view resolver translates a view name to a URL and hands the request over to the RequestDispatcher to render the view.

		<bean id="viewResolver"
			class="org.springframework.web.servlet.view.UrlBasedViewResolver">
			<property name="contentType" value="text/html;charset=UTF-8"/>
			<property name="viewClass">
				<value>
					org.springframework.web.servlet.view.tiles2.TilesView
				</value>
			</property>
		 </bean>

		*The prefix+string returned by controller+suffix page will be invoked for the view component. 
	
	2.TilesConfigurer

		<bean id="tilesConfigurer"
			class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
			<property name="definitions">
				<list>
					<value>/WEB-INF/tiles.xml</value>
				</list>
			</property>
		 </bean>
	
	3.add dtd in tiles.xml	
		<!DOCTYPE tiles-definitions PUBLIC
	  "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" 
	  "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">

	4.add the tiles maven dependency in ebay-repo.
		<!-- Apache Tiles start -->
		    <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>3.0.5</version>
		    </dependency>

		    <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>3.0.5</version>
		    </dependency>

		     <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-api</artifactId>
			<version>3.0.5</version>
		    </dependency>
		     <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-servlet</artifactId>
			<version>3.0.5</version>
		    </dependency>
		     <dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-template</artifactId>
			<version>3.0.5</version>
		    </dependency>
		  <!-- Apache Tiles end -->

STEP-9. create two folders in WEB-INF
	1.jsp
	  ->create a jsp file inside the jsp folder.
		1.login.jsp   
	2.layout
	  ->create following jsp files inside the jsp folder.
		1.header.jsp   
		2.footer.jsp
		3.menu.jsp	
		4.baseLayout.jsp
	->add the servlet maven dependency in ebay-repo
		<!-- servlet maven dependency Start -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>2.5</version>
			    	<scope>provided</scope>
			</dependency>

			<dependency>
	    			<groupId>javax.servlet</groupId>
	   			<artifactId>jstl</artifactId>
	    			<version>1.2</version>
			</dependency>
	 	<!-- servlet maven dependency end -->
		
*maven clean install build

STEP-10. in baseLayout.jsp 
	->add the taglibs maven dependency in ebay-repo
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>	
		
	*Note:we add taglib dependency because inside baseLayout.jsp we use it.
	<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
	<%@ taglib uri="http://tiles.apache.org/tags-tiles" prefix="tiles"%>
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
		<table width="100%" border="0" cellpadding="0" cellspacing="0"
			align="left">
			<tr>
				<td colspan="2" align="left"><tiles:insertAttribute name="menu" />
				</td>
			</tr>
			<tr>
				<td colspan="2" align="left"><tiles:insertAttribute name="header" /></td>
			</tr>
			<tr>
				<td valign="top" bgcolor="#FFC266"><tiles:insertAttribute name="body" /></td>
			</tr>
			<tr>
				<td colspan="2" align="left"><tiles:insertAttribute name="footer" /></td>
			</tr>
		</table>
</body>
</html>

STEP-11. in tiles.xml
	Note:here we connect tiles with baseLayout.jsp

	<tiles-definitions>
		<definition name="baseTemplate" id="baseTemplate" template="/WEB-INF/layout/baseLayout.jsp">
			<put-attribute name="title" type="string" value="${title}" />
			<put-attribute name="menu" value="/WEB-INF/layout/menu.jsp" />
			<put-attribute name="header" value="/WEB-INF/layout/header.jsp" />
			<put-attribute name="body" value="${body}" />
			<put-attribute name="footer" value="/WEB-INF/layout/footer.jsp" />
		</definition>
	</tiles-definitions>

STEP-12. Create a package com.aartek.controller inside ebay-web 
		*ebay-web->src->main->java->com.aartek.controller
	
	Create a class LoginController inside com.aartek.controller package	
		*ebay-web->src->main->java->com.aartek.controller->LoginController
	
	*inside dispatcher-servlet.xml we add 
		<context:component-scan base-package="com.aartek.controller" />
	for scan all controller
	
	->now we add spring dependency "spring-webmvc"
		
		<!-- Spring Maven dependency start-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>3.2.18.RELEASE</version>
		</dependency>
		<!-- Spring Maven dependency end -->
	
	and all jar will be added automatically.

STEP-13.
	1.in index.jsp
		<%response.sendRedirect("showPage.do");  %>
	*we can send(go) on specified URL	

	2.create method(showPage) in LoginController Class.   
	@RequestMapping("/showPage")  //same as action name of sendRedirect()[response.sendRedirect("showPage.do")]	
	public String showPage()
	{
		return "login"; //this name is same as name and id of defination tag of tiles.xml
	}

	3.in tiles.xml 
	<tiles-definitions>
		<definition name="login" id="login" extends="baseTemplate">
			<put-attribute name="title" type="string" value="Login Page" />
			<put-attribute name="body" value="/WEB-INF/jsp/login.jsp" />
		</definition>
	</tiles-definitions>

STEP-14.<url-pattern>*.do</url-pattern> in web.xml

STEP-15.Create two packages 
	1.com.aartek.Repository in ebay-repo and Create LoginRepository.java class
		*ebay-repo->src->main->java->com.aartek.repository->LoginRepository.

		*create a method inside LoginRepository.

		*add SLF4j and LOG4j maven depedency in ebay-repo pom.xml.

		<!-- slf4j-log4j12 maven depedency -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.25</version>
			<scope>test</scope>
		</dependency>

		<!-- slf4j-simple maven depedency -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>1.7.25</version>
			<scope>test</scope>
		</dependency>

		<!-- slf4j-api maven depedency -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.25</version>
		</dependency>

		<!-- slf4j-api maven depedency End -->

		
			==LoginRepository.java class==
		import org.apache.log4j.Logger;
		import org.springframework.stereotype.Repository;

		@Repository
		public class LoginRepository 
		{
			private Logger logger = Logger.getLogger(LoginRepository.class);
	
			public void showPage()
			{
				logger.info("Inside LoginRepository showPage Method");
			}
		}

	2.com.aartek.service in ebay-service and Create LoginService.java class
		*ebay-service->src->main->java->com.aartek.service->LoginService
		
		*we will injecting LoginService to LoginRepository by using @Autowired 		
		@Autowired
		private LoginRepository loginRepository;		

			==LoginService.java class==
		import org.apache.log4j.Logger;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Service;

		import com.aartek.repository.LoginRepository;

		@Service
		public class LoginService
		{
			@Autowired
			private LoginRepository loginRepository;
	
			private Logger logger = Logger.getLogger(LoginService.class);
	
			public void showPage()
			{
				logger.info("Inside LoginService showPage Method");
				//call the showPage() method 0f LoginRepository
				loginRepository.showPage();
			}
		}
	
	3.*we will injecting LoginController to LoginService by using @Autowired 		
		@Autowired
		private LoginService loginService;	
			==LoginController.java class==
		import org.apache.log4j.Logger;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.RequestMapping;

		import com.aartek.service.LoginService;

		@Controller
		public class LoginController 
		{
			@Autowired
			private LoginService loginService;
	
			private static Logger log = Logger.getLogger(LoginController.class);

			@RequestMapping("/sendlogin")
			public String showPage()
			{
				log.info("inside LoginController showPage Method");
				loginService.showPage();
				return "login";

			}
		}

	4.*inside dispatcher-servlet.xml we add 
		<context:component-scan base-package="com.aartek.service" /> 
		<context:component-scan base-package="com.aartek.repository" />
	
	==>Controller==>Service==>Repository	

STEP-16.Designning Login Page.
	
	==>JSP==>Controller==>Service==>Repository

	*create simple login Page throw html inside login.jsp 
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
	<body>
		<form>
			<table bgcolor="#c1ffff">
				<tr>
					<td><label>Email : </label></td>
					<td><input type="text" name="email"  /></td>
				</tr>
				<tr>
					<td><label>Password : </label></td>
					<td><input type="password" name="password" /></td>
				</tr>
				<tr>
					<td colspan="2"><input type="submit" value="Submit" /></td>
				</tr>
			</table>
		</form>
	</body>
	</html>

STEP-17.1.create package "com.aartek.model" inside ebay-repo.
		*ebay-repo->src->main->java->com.aartek.model

	2.create "POJO class(User)" inside com.aartek.model 
		*ebay-repo->src->main->java->com.aartek.model->User
					
			==User.java==
		import java.io.Serializable;
		public class User implements Serializable
		{
			private static final long serialVersionUID = 1L;
	
			private Integer userId;
			private String email;
			private Integer password;
	
			public Integer getUserId() {
				return userId;
			}
			public void setUserId(Integer userId) {
				this.userId = userId;
			}
			public String getEmail() {
				return email;
			}
			public void setEmail(String email) {
				this.email = email;
			}
			public Integer getPassword() {
				return password;
			}
			public void setPassword(Integer password) {
				this.password = password;
			}
	
		}

STEP-18. 1.Initialized this class(User.java) inside LoginController
	 2.so we will change in LoginController
		a.we create Model Interface Object as parameter in showPage() method of LoginController
			*public String showPage(Model model)
		==Model Interface: 1.The Model encapsulates the application data and in general they will consist of POJO.
				   2.same work as Map(Key-value pair).
		b.model.addAttribute("keyUser",user);
			==>:Add the supplied attribute to this Map using a generated name.
 		
		==LoginController.java==
	import org.apache.log4j.Logger;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Controller;
	import org.springframework.web.bind.annotation.RequestMapping;
	import com.aartek.service.LoginService;

	@Controller
	public class LoginController 
	{
		@Autowired
		private LoginService loginService;
	
		private static Logger log = Logger.getLogger(LoginController.class);

		@RequestMapping("/sendlogin")
		public String showPage(Model model)
		{
			log.info("inside LoginController showPage Method");
			loginService.showPage();
			User user = new User();
			model.addAttribute("keyUser",user);
			return "login";

		}
	}

Note:=problem= if we enter values from our JSP Page to LoginController,
		For this: if we use <%scriptlet %> tag of JSP then here we face one problem,
			:  our HTML Page(code) rendor first and then  executed scriptlet tag.
			: scriptlet tag have no references.So it return only HTML Page Only. 
			: So we pass references before rendoring HTML Page.		
		Solution:We use Spring Tags and JSTL Tags.

	3.we add tag library of Spring in login.jsp.
		<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
	
	4.and we have to change login.jsp.
	  	
		==login.jsp.==
	<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
	<body>
		<form:form modelAttribute="keyUser" method="post">
			<table bgcolor="#07eef2" width="100%" align="left">

				<tr>
					<td><label>Email : </label></td>
					<td><form:input path="email" id="email" /></td>
				</tr>
				<tr>
					<td><label>Password : </label></td>
					<td><form:password path="password" id="password" /></td>
				</tr>
				<tr>
					<td></td>
					<td align="left"><form:button id="login">Login</form:button></td>
				</tr>
			</table>
		</form:form>
	</body>
	</html>

NOTE:1.#modelAttribute="keyUser"# is use to hold the values on JSP(login.jsp) which is send by LoginController.
		
	a.we have to change in login.jsp.
	  	
		==login.jsp.==
	<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
	<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>

	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
	<body>
		<form:form modelAttribute="keyUser" method="post" action="checklogin.do">
			<table bgcolor="#07eef2" width="100%" align="left">

				<tr>
					<td><label>Email : </label></td>
					<td><form:input path="email" id="email" /></td>
				</tr>
				<tr>
					<td><label>Password : </label></td>
					<td><form:password path="password" id="password" /></td>
				</tr>
				<tr>
					<td></td>
					<td align="left"><form:button id="login">Login</form:button></td>
				</tr>
			</table>
		</form:form>
	</body>
	</html>

	
Note:2.if we use method="RequestMethod.GET"(it is default) then no need to change, because we are not doing change in User table ,only we get the values from User table.

Note:3.if we use method="RequestMethod.POST" then we need to change in LoginController.
	we create a new method POST type.
	
	==LoginController.java==
	@RequestMapping(value="/checklogin", method=RequestMethod.POST)
	public String checklogin(@ModelAttribute("keyUser") User user)
	{
		log.info(user.getEmail());
		log.info(user.getPassword());
		return "login";
	}  

STEP-19.==>JSP==>Controller==>Service==>Repository

	:Now our Database came into the picture.
	:For This We Use Hibernate ORM.
	:==>JSP==>Controller==>Service==>Repository==>Database.

	a.Create an applicationContext.xml By Two Ways 
	 1.Inside the WEB-INF subfolder ebay-web.
		
				=====applicationContext.xml=====
		<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:batch="http://www.springframework.org/schema/batch"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:jee="http://www.springframework.org/schema/jee" xmlns:jms="http://www.springframework.org/schema/jms"
  xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util" xmlns:ws="http://www.springframework.org/schema/web-services"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
    http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services-1.5.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
   
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
   		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
   		<property name="url" value="jdbc:mysql://localhost:3306/eBaySpring"/>
   		<property name="username" value="root"/>
   		<property name="password" value="root"/>
   </bean>
   
   <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="packagesToScan">
			<list>
				<value>com.aartek.model</value>
			</list>
		</property>
	
		<property name="hibernateProperties">
			<props>
			    <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<property name="dataSource">
   			<ref bean="dataSource"/>
   		</property>		
   </bean>
   
   <bean id="template" class="org.springframework.orm.hibernate3.HibernateTemplate">  
   		<property name="sessionFactory" ref="sessionFactory"/>
  </bean>
</beans>
			
		:For This we have to add same configuration in web.xml
		:ContextLoaderListener:=> ContextLoaderListener work on ServletContainer.When our server have started and ServletContainer is up ,it's load/execut our WAR File.
					  when Context has Loaded then some thing has been loaded,then ContextLoaderListener is use. 
		
			<context-param>
			  	<param-name>contextConfigLocation</param-name>
			  	<param-value>/WEB-INF/applicationcontext.xml</param-value>
			</context-param>
			<listener>
			  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
			</listener>  
			
			==web.xml==		
		<!DOCTYPE web-app PUBLIC 
		"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
		 "http://java.sun.com/dtd/web-app_2_3.dtd" >

		<web-app>
		  <display-name>Archetype Created Web Application</display-name>
		  
		  <context-param>
		  	<param-name>contextConfigLocation</param-name>
		  	<param-value>/WEB-INF/applicationcontext.xml</param-value>
		  </context-param>
		  <listener>
		  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		  </listener>
		  
		  <servlet>
		    <servlet-name>ebay_dispatcher</servlet-name>
		    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		    <load-on-startup>1</load-on-startup>
		  </servlet>
		  <servlet-mapping>
		  	<servlet-name>ebay_dispatcher</servlet-name>
		  	<url-pattern>*.do</url-pattern>
		  </servlet-mapping>

		</web-app>

	2.Inside the resource folder subfolder ebay-web.
 		:For This we have to add same configuration in dispatcher-servlet.xml
			<import resource="classpath:/applicationContext.xml" />
		
		<?xml version="1.0" encoding="UTF-8"?>
		<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
			xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
			xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
			 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

			<mvc:annotation-driven />
			<context:annotation-config />

			<import resource="classpath:/applicationContext.xml" />

			<context:component-scan base-package="com.aartek.controller" />
			<context:component-scan base-package="com.aartek.service" />
			<context:component-scan base-package="com.aartek.repository" />
			<context:component-scan base-package="com.aartek.model" />

			<!-- tiles.xml ko connected karne ke liye hai do bean add karte hai dispatcher-servlet.xml-->
			
				====dispatcher-servlet.xml====

			<bean id="tilesViewResolver"
				class="org.springframework.web.servlet.view.UrlBasedViewResolver">
				<property name="viewClass"
					value="org.springframework.web.servlet.view.tiles3.TilesView" />
			</bean>

			<bean id="tilesConfigurer"
				class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
				<property name="definitions">
					<list>
						<value>/WEB-INF/tiles.xml</value>
					</list>
				</property>
			</bean>

		</beans>
	
	3.add  maven dependency in pom.xml of ebay-repo.
		1.common dbcp for DataSource.		
		<!-- commmon dbcp maven dependency for DataSource -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.2.2</version>
		</dependency>
		
		2.spring-orm for sessionFactory.	
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>4.3.16.RELEASE</version>
		</dependency>
		
		3.Hiberante and MySQL Maven Dependency.
		<!-- MySQL database driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.9</version>
		</dependency>

		<!--Hibernate -->

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.6.10.Final</version>
		</dependency>

STEP-20.==>JSP==>Controller==>Service==>Repository==>Database.
	1.Controller==>Service #POST method.
			==LoginController.java==
		@RequestMapping(value = "/checklogin" , method = RequestMethod.POST)
		public String checkLogin(@ModelAttribute("keyUser") User user)
		{
			log.info("inside LoginController checkLogin Method");
			loginService.showPage(user);
			log.info(user.getEmail());
			log.info(user.getPassword());
			return "login";
		}
	2.Service==>Repository 
			==LoginService.java==
		public void showPage(User user)
		{
			logger.info("Inside LoginService showPage Method");
			loginRepository.showPage(user);
			logger.info(user.getEmail());
			logger.info(user.getPassword());
		}

STEP-21: ==>JSP==>Controller==>Service==>Repository==>Database.
	1.Doing Same Changes in User.java
		
		==User.java==
	package com.aartek.model;

	import java.io.Serializable;

	import javax.persistence.Entity;
	import javax.persistence.GeneratedValue;
	import javax.persistence.GenerationType;
	import javax.persistence.Id;
	import javax.persistence.Table;

	@Entity
	@Table(name="user")
	public class User implements Serializable
	{
		private static final long serialVersionUID = 1L;
	
		@Id
		@GeneratedValue(strategy=GenerationType.AUTO)
		private Integer userId;
	
		private String email;
	
		private Integer password;
	
		public Integer getUserId() {
			return userId;
		}
		public void setUserId(Integer userId) {
			this.userId = userId;
		}
		public String getEmail() {
			return email;
		}
		public void setEmail(String email) {
			this.email = email;
		}
		public Integer getPassword() {
			return password;
		}
		public void setPassword(Integer password) {
			this.password = password;
		}
	
	}
	
	2.add javassist maven dependency in pom.xml of eby-repo.
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.12.1.GA</version>
		</dependency>
	3.check value(Email and password which is send by login.jsp=>controller=>service=>repository) 
		
		==LoginRepository.java==

	package com.aartek.repository;

	import java.util.Iterator;
	import java.util.List;

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.orm.hibernate3.HibernateTemplate;
	import org.springframework.stereotype.Repository;

	import com.aartek.model.User;

	@Repository
	public class LoginRepository {
	
		@Autowired
		public HibernateTemplate template;
	
		public void showRepo(User user){
			System.out.println("Inside LoginRepository");
			System.out.println("Repo: Email : "+user.getEmail());
			System.out.println("Repo: Password : "+user.getPassword());
		
			if(user.getEmail()!=null && user.getPassword()!=null){
			
				List<User> li=template.find("from User u where u.email=? AND u.password=?",user.getEmail(),user.getPassword());
				Iterator<User> it=(Iterator)li.iterator();
				while(it.hasNext()){
					System.out.println("Successful Login !");
					User u1=(User)it.next();
					System.out.println(" Email : "+u1.getEmail()+" Password : "+u1.getPassword());
				}	
			}
			else{
				System.out.println("Enter correct email & password.");
			}
		}
	}

STEP-21:1.For User Registration create registration.jsp	
				
				==registration.jsp
	<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
	<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Insert title here</title>
	</head>
	<body>

		<form:form method="POST" modelAttribute="registrationUser"
			action="registration1.do">
			<table>
				<tr>
					<th>Fill below details for registration</th>
				</tr>
				<tr>
					<td><label>First Name : </label></td>
					<td><form:input path="fname" /></td>
				</tr>
				<tr>
					<td><label>Last Name : </label></td>
					<td><form:input path="lname" /></td>
				</tr>
				<tr>
					<td><label>Email : </label></td>
					<td><form:input path="email" id="email" /></td>
				</tr>
				<tr>
					<td><label>Password : </label></td>
					<td><form:password path="password" id="password" /></td>
				</tr>
				<tr>
				<tr>
					<td><label>MobileNo : </label>
					</td>
					<td><form:input path="mobno" /></td>
				</tr>
				<tr>
					<td colspan="2"><label>Register : </label></td>
					<td><form:button id="submit">Register</form:button></td>
				</tr>
			</table>
		</form:form>
	</body>
	</html>
	
	2.create RegistrationController.java
			
			==RegistrationController.java==
		package com.aartek.controller;

		import org.apache.log4j.Logger;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Controller;
		import org.springframework.ui.Model;
		import org.springframework.validation.BindingResult;
		import org.springframework.validation.annotation.Validated;
		import org.springframework.web.bind.annotation.ModelAttribute;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;

		import com.aartek.model.User;
		import com.aartek.service.RegistrationService;
		import com.aartek.validator.RegistrationValidator;

		@Controller
		public class RegistrationController
		{
			
			@Autowired
			public RegistrationService rs;
			
			@Autowired
			public RegistrationValidator rv;
			
			private static  Logger logger = Logger.getLogger(RegistrationController.class);
			
			@RequestMapping("/registrationPage")
			public String registrationPage(Model model){
				User user=new User();
				model.addAttribute("registrationUser",user);
				return "registration";
			}
			
			@RequestMapping(value="/registration1" , method=RequestMethod.POST)
			public String registrationUser(@ModelAttribute("registrationUser") @Validated User user,BindingResult result,Model model){
				System.out.println("Inside RegistrationController");
				
				rv.validate(user, result);
				if(result.hasErrors()){
					return "registration";
				}
				
				logger.info(user.getId());
				logger.info(user.getFname());
				logger.info(user.getLname());
				logger.info(user.getEmail());
				logger.info(user.getPassword());
				logger.info(user.getMobno());

				rs.registerService(user);
				
				/*
				user=new User();
				model.addAttribute("registrationUser",user);
				*/

				user=new User();
				model.addAttribute("keyUser",user);
				return "login";
			}
		}
	3.create RegistrationService.java
				==RegistrationService.java==
		package com.aartek.service;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Service;

		import com.aartek.model.User;
		import com.aartek.repository.RegistrationRepository;

		@Service
		public class RegistrationService {
			
			@Autowired
			public RegistrationRepository rr;
			
			public void registerService(User user){
				System.out.println("Inside RegistrationService");
				rr.registerRepo(user);
			}
		}

	4.create RegistrationRepository.java
	
				==RegistrationRepository.java==
		package com.aartek.repository;

		import java.util.List;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.orm.hibernate3.HibernateTemplate;
		import org.springframework.stereotype.Repository;

		import com.aartek.model.User;

		@Repository
		public class RegistrationRepository {
			
			@Autowired
			public HibernateTemplate ht;
			
			public void registerRepo(User user){
				System.out.println("Inside Registration Repository");
				if(user.getEmail()!=null && user.getFname()!=null && user.getLname()!=null && user.getMobno()!=null && user.getPassword()!=null){
					ht.save("User", user);
					System.out.println("Registered Successfully.");
				}
				else {
					System.out.println("Enter complete details.");
				}
			}
			
			public List<User> findByEmail(String email)
			{
				@SuppressWarnings("unchecked")
				List<User> list=ht.find("from User where email=?",email);
				
				if(list.isEmpty())
				{
					return null;
				}
				else
				{
					return list;
				}
			}
			
		}
	5.Add configuration for Registration Page in tiles.xml 
						==tiles.xml==
				  <definition name="registration" id="registration" extends="baseTemplate">
					<put-attribute name="title" type="string" value="Registration Page" />
					<put-attribute name="body" value="/WEB-INF/jsp/registration.jsp" />
				  </definition>

STEP-22:in login.jsp
		
		response.sendRedirect():it is genrate the action for randoring page

		<% 
			response.sendRedirect("showPage.do");
		%>

STEP-23:1.product.jsp
			create product page in 2 porsone.
			1.prodName,prodDesc,prodPrice ....so on.
			2.Show all Product.
			
					==product.jsp==
			<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
			<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
			<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
			<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
			<%@ page isELIgnored="false"%>
			 
			<html>
			<head>
			<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
			<title>Insert title here</title>
			</head>
			<body>
				<table>
					<tr>
						<td>
							<table>
								<form:form modelAttribute="addProduct" method="post" action="product1.do">
									<tr>
										<td colspan="2">
											Enter product details :
										</td>
									</tr>
									<tr>
										<td>
											<label>Product Name : </label>
										</td>
										<td>
											<form:input path="pname"/>
										</td>
									</tr>
									<tr>
										<td>
											<label>Product Price : </label>
										</td>
										<td>
											<form:input path="pprice"/>
										</td>
									</tr>
									<tr>
										<td>
											<label>Product Description : </label>
										</td>
										<td>
											<form:input path="pdesc"/>
										</td>
									</tr>
									<tr>
										<td>
											<label>Date : </label>
										</td>
										<td>
											<form:input path="date"/>
										</td>
									</tr>
									<tr>
										<td colspan="2">
											<input type="submit" value="Submit">
										</td>
									</tr>
								</form:form>	
							</table>
						</td>
					</tr>
					<tr>
						<td>
							<table border="1">
								
								<c:if test="${not empty prodList}">
									<tr>
										<td>pid</td>
										<td>pname</td>
										<td>pprice</td>
										<td>pdesc</td>
										<td>date</td>
									</tr>
								</c:if>
								<c:forEach items="${prodList}" var="p">
									<form:form method="post" action="product_del.do" modelAttribute="addProduct">
									<tr>
										<td><c:out value="${p.pid}" /></td>
										<td><c:out value="${p.pname}" /></td>
										<td><c:out value="${p.pprice}" /></td>
										<td><c:out value="${p.pdesc}" /></td>
										<td><c:out value="${p.date}" /></td>
										<td>
											<button type="submit" name="action" value="delete+<c:out value="${p.pid}" />">Delete</button>
										</td>
										<td>
											<button type="submit" name="action" value="edit+<c:out value="${p.pid}" />">Edit</button>
										</td>
									</tr>
									</form:form>
								</c:forEach>
								
							</table>
						</td>
					</tr>
				</table>				
			</body>
			</html>
			
		2.create ProductController.java
		
				==ProductController.java==
			package com.aartek.controller;

			import java.util.ArrayList;
			import java.util.Collection;
			import java.util.Iterator;
			import java.util.List;
			import java.util.Map;

			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.stereotype.Controller;
			import org.springframework.ui.Model;
			import org.springframework.web.bind.annotation.ModelAttribute;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.RequestMethod;
			import org.springframework.web.bind.annotation.RequestParam;

			import com.aartek.model.Product;
			import com.aartek.service.ProductService;

			@Controller
			public class ProductController {
				@Autowired
				public ProductService ps;
				
				@RequestMapping("/productPage")
				public String  showProduct(Model model){
					ArrayList<Product> li=null;
					Product product=new Product();
					model.addAttribute("addProduct", product);
					return "product";
				}
				
				@RequestMapping(value="/product1" , method=RequestMethod.POST)
				public String submitProduct(@ModelAttribute("addProduct")Product product , Model model){
					System.out.println("InsideProduct Controller");
					List<Product> li=ps.addProductService(product);
					product=new Product();
					
					Iterator<Product> it=li.iterator();
					while(it.hasNext()){
						Product prod=(Product)it.next();
						System.out.println(prod.getPid()+"   "+prod.getPname()+"   "+prod.getPprice()+"   "+prod.getDate()+"   "+prod.getPdesc());
					}
					
					model.addAttribute("addProduct", product);
					model.addAttribute("prodList", li);
					return "product";
				}
				
				@RequestMapping(value="/product_del" , method=RequestMethod.POST)
				public String deleteProduct(@ModelAttribute("addProduct")Product product , Model model , @RequestParam String action){
					System.out.println("InsideProduct Controller"+action);
					List<Product> li=null;
					
					if(action.contains("delete+")){
						Integer i=Integer.parseInt(action.replace("delete+", ""));
						product.setPid(i);
						li=ps.deleteProductService(product);
						product=new Product();
					}
					else if(action.contains("edit+")){
						Integer pid=Integer.parseInt(action.replace("edit+", ""));
						product=ps.findSProductByPidService(pid);
						li=ps.listAllProductService();
					}

					
					Iterator<Product> it=li.iterator();
					while(it.hasNext()){
						Product prod=(Product)it.next();
						System.out.println(prod.getPid()+"   "+prod.getPname()+"   "+prod.getPprice()+"   "+prod.getDate()+"   "+prod.getPdesc());
					}
					
					model.addAttribute("addProduct", product);
					model.addAttribute("prodList", li);
					return "product";
				}
			}
		3.create ProductService.java
		
				==ProductService.java==
			package com.aartek.service;

			import java.util.List;

			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.stereotype.Service;

			import com.aartek.model.Product;
			import com.aartek.repository.ProductRepository;

			@Service
			public class ProductService {
				
				@Autowired
				public ProductRepository pr;
				
				public List<Product> addProductService(Product product){
					System.out.println("Inside  ProductService");
					pr.saveProduct(product);
					List<Product> li= pr.findProduct();
					System.out.println("end of  ProductService");
					return li;
				}
				
				public List<Product> deleteProductService(Product product){
					System.out.println("Inside  ProductService delete");
					pr.deleteProduct(product);
					List<Product> li= pr.findProduct();
					System.out.println("end of  ProductService delete");
					return li;
				}
				
				public Product findSProductByPidService(Integer pid){
					return pr.findSProductByPidRepo(pid);
				}
				
				public List<Product> listAllProductService(){
					List<Product> li= pr.findProduct();
					return li;
				}
			}
	
		
		4.create ProductRepository.java
		
				==ProductRepository.java==
			package com.aartek.repository;

			import java.util.List;

			import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.orm.hibernate3.HibernateTemplate;
			import org.springframework.stereotype.Repository;

			import com.aartek.model.Product;

			@Repository
			public class ProductRepository {
				
				@Autowired
				public HibernateTemplate ht;
				
				public void saveProduct(Product product){
					System.out.println("Inside ProductRepository save");
					
					ht.save("Product", product);
					System.out.println("Successfully saved product.");
				}
				
				public List<Product> findProduct(){
					System.out.println("Inside ProductRepository find");
					List<Product> li=ht.find("from Product");
					return li;
				}
				
				public void deleteProduct(Product product){
					System.out.println("Inside ProductRepository delete");
					
					ht.delete("Product", product);
					System.out.println("Successfully deleted product.");
				}
				
				public Product findSProductByPidRepo(Integer pid){
					System.out.println("Inside ProductRepository find");
					Product product=(Product)ht.get(Product.class, pid);
					return product;
				}
			}
			5.Add configuration for Product Page in tiles.xml 
						
						==tiles.xml==
				  <definition name="product" id="product" extends="baseTemplate">
					<put-attribute name="title" type="string" value="Product Page" />
					<put-attribute name="body" value="/WEB-INF/jsp/product.jsp" />
				  </definition>

		
14. Then we will Autowire LoginService in LoginController and  LoginRepository in     LoginService.


15. Create method showPage inside the LoginService and LoginRepository.


16. Call showPage method(of LoginService) with the object we have created of loginService inside LoginController  as it is call showPage method(of LoginRepository) with the object we have created inside the LoginService.

17(According to sir 14.A): Create Login.jsp inside the jsp folder. And create a form using HTML tags,.Run

18(14.B): write configuration in tile.xml to align the login.jsp

19  






